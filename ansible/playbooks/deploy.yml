---
# Activist Application Deployment Playbook
#
# Purpose:
# - Automates the complete setup of development environment
# - Configures SSH tunneling for local development
# - Installs and configures all required dependencies
#
# Requirements:
# - macOS or Linux target system
# - Ansible 2.18+
# - community.general collection
# - Root access on target system
#
# Usage:
# ansible-playbook -i inventory/production deploy.yml
# or
# ansible-playbook -i inventory/staging deploy.yml

- name: Deploy Activist Application
  hosts: all
  vars:
    # Set project directory based on host
    project_dir: "{{ app_config.deploy.local_path if inventory_hostname == 'localhost' else '/root/activist' }}"
    frontend_dir: "{{ project_dir }}/frontend"
    template_dir: "{{ ansible_playbook_dir }}/templates"
  become: false

  handlers:
    - name: Debug Docker installation output
      ansible.builtin.debug:
        var: docker_install
    - name: Debug Yarn migration status
      ansible.builtin.debug:
        var: yarn_migration
      when: false
    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: true

  pre_tasks:
    - name: Enable detailed output
      ansible.builtin.debug:
        msg: "Starting deployment with verbose output"

  tasks:
    # Linux-specific system preparation
    - name: Wait for apt lock release
      ansible.builtin.shell: |
        while lsof /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
          echo "Waiting for apt lock release..."
          sleep 5
        done
      register: apt_wait
      changed_when: false
      retries: 60
      delay: 5
      until: apt_wait.rc == 0

    - name: Wait for any unattended upgrade to finish
      ansible.builtin.shell: |
        set -o pipefail
        while pgrep -a 'apt|dpkg' >/dev/null; do
          echo "Active processes preventing installation:"
          echo "Count: $(pgrep -c 'apt|dpkg')"
          echo "PIDs: $(pgrep 'apt|dpkg' | tr '\n' ' ')"
          echo "Commands:"
          pgrep -a 'apt|dpkg' | awk '{$1=""; print $0}' | sed 's/^/  /'
          echo "Lock files status:"
          lsof /var/lib/dpkg/lock-frontend /var/lib/apt/lists/lock /var/lib/dpkg/lock 2>/dev/null || true
          echo "Unattended-upgrades status:"
          systemctl status unattended-upgrades --no-pager || true
          echo "Waiting 5 seconds for package operations to finish..."
          sleep 5
        done
      args:
        executable: /bin/bash
      register: upgrade_wait
      changed_when: false
      retries: 60
      delay: 5
      until: upgrade_wait.rc == 0

    - name: Include APT variables
      ansible.builtin.include_vars:
        file: vars/apt.yml
        name: apt
      when: ansible_system != 'Darwin'

    - name: Install required packages
      ansible.builtin.apt:
        name:
          - curl
          - wget
          - git
          - gnupg2
          - software-properties-common
          - apt-transport-https
          - ca-certificates
          - python3-venv
        state: present
        update_cache: true
        force_apt_get: true
      environment:
        DEBIAN_FRONTEND: "noninteractive"
      register: pkg_install
      retries: 5
      delay: 30
      until: pkg_install is success
      when: ansible_system != 'Darwin'

    - name: Add Docker GPG key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      when: ansible_system != 'Darwin'  # Skip on macOS

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present
        update_cache: true
      when: ansible_system != 'Darwin'  # Skip on macOS

    - name: Wait for APT locks before Docker install
      ansible.builtin.shell: |
        while lsof /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || lsof /var/lib/apt/lists/lock >/dev/null 2>&1 || lsof /var/lib/dpkg/lock >/dev/null 2>&1; do
          sleep 5
        done
      changed_when: false
      when: ansible_system != 'Darwin'  # Skip on macOS

    - name: Install Docker packages (Linux)
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: true
      register: docker_install
      retries: 5
      delay: 30
      until: docker_install is success
      when: ansible_system != 'Darwin'  # Skip on macOS
      async: 600
      poll: 5

    - name: Wait for Docker to be installed
      ansible.builtin.wait_for:
        path: /usr/bin/docker
        timeout: 60
      when: ansible_system != 'Darwin'  # Skip on macOS

    - name: Enable and start Docker service (Linux)
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: true
        daemon_reload: true
      register: docker_service
      when: ansible_system != 'Darwin'  # Skip on macOS

    - name: Set config file path
      ansible.builtin.set_fact:
        config_path: "{{ playbook_dir }}/../../config.yml"
      delegate_to: localhost

    - name: Load YAML configuration
      ansible.builtin.include_vars:
        file: "{{ config_path }}"
        name: app_config

    - name: Clone application repository
      ansible.builtin.git:
        repo: "{{ app_config.deploy.repository }}"
        dest: "{{ project_dir }}"
        version: "{{ lookup('env', 'BRANCH') }}"
        force: true
      when: inventory_hostname != 'localhost'

    # Node.js installation for Linux
    - name: Setup Node.js repository (Linux)
      ansible.builtin.uri:
        url: https://deb.nodesource.com/setup_20.x
        return_content: true
      register: node_setup
      when: ansible_system != 'Darwin'

    - name: Execute Node.js setup script (Linux)
      ansible.builtin.shell: "{{ node_setup.content }}"
      args:
        executable: /bin/bash
      changed_when: false
      when: ansible_system != 'Darwin'

    - name: Install Node.js (Linux)
      ansible.builtin.apt:
        name: nodejs
        state: present
        update_cache: true
      environment:
        DEBIAN_FRONTEND: "noninteractive"
      register: nodejs_install
      retries: 3
      delay: 10
      until: nodejs_install is success
      when: ansible_system != 'Darwin'

    - name: Update npm to latest version
      ansible.builtin.shell: |
        npm install -g npm@latest
      changed_when: false
      when: ansible_system != 'Darwin'  # Skip on macOS

    - name: Clean up existing Yarn installations
      become: true
      ansible.builtin.shell: |
        # Remove system Yarn
        npm uninstall -g yarn || true
        rm -f /usr/bin/yarn /usr/local/bin/yarn

        # Install Corepack directly
        npm install -g corepack

        # Enable Corepack
        corepack enable

        # Prepare specific Yarn version
        corepack prepare yarn@4.6.0 --activate
      args:
        executable: /bin/bash
      environment:
        PATH: "/usr/local/bin:/usr/bin:/bin:{{ ansible_env.PATH }}"
      register: corepack_setup
      changed_when: "'already enabled' not in corepack_setup.stdout"
      async: 300
      poll: 5
      when: ansible_system != 'Darwin'  # Skip on macOS

    - name: Set project Yarn version
      ansible.builtin.shell: |
        yarn set version berry 2>&1
      args:
        chdir: "{{ frontend_dir }}"
        executable: /bin/bash
      environment:
        PATH: "/usr/local/bin:/usr/bin:/bin:{{ ansible_env.PATH }}"
      changed_when: false
      when: inventory_hostname != 'localhost'

    - name: Pre-cache Yarn dependencies
      ansible.builtin.shell: |
        yarn config set enableInlineBuilds true
        yarn config set enableTelemetry false
        yarn config set httpTimeout 300000
      args:
        chdir: "{{ frontend_dir }}"
        executable: /bin/bash
      environment:
        PATH: "{{ ansible_env.HOME }}/.yarn/bin:/usr/local/bin:/usr/bin:/bin:{{ ansible_env.PATH }}"
      changed_when: false
      when: inventory_hostname != 'localhost'

    - name: Configure Yarn for non-interactive install
      ansible.builtin.shell: |
        yarn config set enableInteractive 0
        yarn config set enableProgressBars 0
        yarn config set enableTelemetry 0
      args:
        chdir: "{{ frontend_dir }}"
        executable: /bin/bash
      environment:
        PATH: "{{ ansible_env.HOME }}/.yarn/bin:/usr/local/bin:/usr/bin:/bin:{{ ansible_env.PATH }}"
      changed_when: false
      when: inventory_hostname != 'localhost'  # Only run on remote host

    - name: Install dependencies with enforced timeout
      ansible.builtin.shell: |
        set -eo pipefail
        cd {{ frontend_dir }}
        timeout 1800 yarn install --immutable --immutable-cache --mode=skip-build
      args:
        executable: /bin/bash
      environment:
        PATH: "{{ ansible_env.HOME }}/.yarn/bin:/usr/local/bin:/usr/bin:/bin:{{ ansible_env.PATH }}"
        YARN_ENABLE_INLINE_BUILDS: "1"
        YARN_HTTP_TIMEOUT: "600000"  # 10 minutes
      async: 2000  # 33 minutes
      poll: 0
      register: yarn_install
      retries: 3
      delay: 300
      until: yarn_install is success
      changed_when: false
      when: inventory_hostname != 'localhost'  # Only run on remote host

    - name: Migrate to Yarn Berry and install
      ansible.builtin.shell: |
        yarn set version berry
        yarn install
      args:
        chdir: "{{ frontend_dir }}"
        executable: /bin/bash
      environment:
        PATH: "{{ ansible_env.HOME }}/.yarn/bin:/usr/local/bin:/usr/bin:/bin:{{ ansible_env.PATH }}"
      async: 900  # 15 minutes
      poll: 0  # Full async mode
      register: yarn_migration
      retries: 2
      until: yarn_migration is success
      changed_when: false
      when: inventory_hostname != 'localhost'  # Only run on remote host

    - name: Verify async job completion
      ansible.builtin.async_status:
        jid: "{{ yarn_migration.ansible_job_id }}"
      register: yarn_job_result
      until: yarn_job_result.finished
      retries: 30
      delay: 30
      ignore_errors: true  # Continue even if job disappeared
      when: inventory_hostname != 'localhost'  # Only run on remote host

    - name: Validate async job ID
      ansible.builtin.debug:
        msg: "Yarn job ID: {{ yarn_migration.ansible_job_id }}"
      when:
        - yarn_migration is defined
        - inventory_hostname != 'localhost'

    - name: Check async status
      ansible.builtin.debug:
        var: yarn_job_result
      when:
        - yarn_job_result is defined
        - inventory_hostname != 'localhost'

    - name: Flush handlers
      ansible.builtin.meta: flush_handlers

    - name: Create Python virtual environment
      ansible.builtin.command:
        cmd: python3 -m venv venv
        chdir: "{{ project_dir }}"
        creates: "{{ project_dir }}/venv/bin/activate"
      when: inventory_hostname != 'localhost'  # Only run on remote host

    - name: Install Python dependencies
      ansible.builtin.pip:
        requirements: "{{ project_dir }}/backend/requirements-dev.txt"
        virtualenv: "{{ project_dir }}/venv"
        state: present
      when: inventory_hostname != 'localhost'  # Only run on remote host

    - name: Configure backend port binding
      ansible.builtin.lineinfile:
        path: "{{ project_dir }}/docker-compose.yml"
        regexp: '("${BACKEND_PORT}:${BACKEND_PORT}")'
        line: '"0.0.0.0:\1"'
        backrefs: true
      when: inventory_hostname != 'localhost'  # Only run on remote host

    - name: Configure frontend port binding
      ansible.builtin.lineinfile:
        path: "{{ project_dir }}/docker-compose.yml"
        regexp: '("${FRONTEND_PORT}:${FRONTEND_PORT}")'
        line: '"0.0.0.0:\1"'
        backrefs: true
      when: inventory_hostname != 'localhost'  # Only run on remote host

    - name: Deploy backend and database first
      community.docker.docker_compose_v2:
        project_src: "{{ project_dir }}"
        env_files:
          - .env.dev
        services:
          - backend
          - db
        build: always
        state: present
      when: inventory_hostname != 'localhost'  # Only run on remote host

    - name: Deploy full application stack
      community.docker.docker_compose_v2:
        project_src: "{{ project_dir }}"
        env_files:
          - .env.dev
        files:
          - docker-compose.yml
        state: present
        pull: "always"
        remove_orphans: true
        build: "always"
      register: compose_result
      until: compose_result is success
      retries: 3
      delay: 10
      when: inventory_hostname != 'localhost'  # Only run on remote host

    - name: Create SSH tunnel environment file
      ansible.builtin.template:
        src: "{{ lookup('env', 'ANSIBLE_TEMPLATES_PATH') }}/ssh-tunnel.env.j2"
        dest: /etc/ssh-tunnel.env
        mode: '0600'
      when: inventory_hostname != 'localhost'

    - name: Unload existing SSH tunnel LaunchAgent (macOS)
      ansible.builtin.command: launchctl unload ~/Library/LaunchAgents/com.activist.tunnel.plist
      failed_when: false
      changed_when: false  # Indicates this task never reports changes
      when: ansible_system == 'Darwin'

    - name: Create SSH tunnel environment file (macOS)
      ansible.builtin.template:
        src: "{{ lookup('env', 'ANSIBLE_TEMPLATES_PATH') }}/ssh-tunnel.env.j2"
        dest: "{{ ansible_env.HOME }}/.config/ssh-tunnel.env"
        mode: '0600'
      when: inventory_hostname == 'localhost'  # Run on local machine

    - name: Ensure ~/.config directory exists
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.config"
        state: directory
        mode: '0755'
      when: ansible_system == 'Darwin'

    - name: Configure SSH tunnel LaunchDaemon (macOS)
      ansible.builtin.template:
        src: "{{ lookup('env', 'ANSIBLE_TEMPLATES_PATH') }}/com.activist.tunnel.plist.j2"
        dest: "{{ ansible_env.HOME }}/Library/LaunchAgents/com.activist.tunnel.plist"
        mode: '0644'
        owner: "{{ ansible_user_id }}"
        group: "staff"
      when: ansible_system == 'Darwin'

    - name: Load SSH tunnel LaunchAgent (macOS)
      ansible.builtin.command: launchctl load -w ~/Library/LaunchAgents/com.activist.tunnel.plist
      changed_when: false
      when: ansible_system == 'Darwin'

    - name: Install autossh (Linux)
      ansible.builtin.apt:
        name: autossh
        state: present
        update_cache: true
      when: ansible_system != 'Darwin'

    - name: Install autossh (macOS)
      ansible.builtin.shell: |
        if [ -d "/opt/homebrew" ]; then
          # M1/M2 Mac
          /opt/homebrew/bin/brew install autossh
        else
          # Intel Mac
          /usr/local/bin/brew install autossh
        fi
      args:
        creates: "{{ '/opt/homebrew/bin/autossh' if ansible_architecture == 'arm64' else '/usr/local/bin/autossh' }}"
      when: ansible_system == 'Darwin'

    - name: Create tunnel management script
      ansible.builtin.template:
        src: "{{ template_dir }}/manage-tunnel.sh.j2"
        dest: "{{ ansible_env.HOME }}/bin/manage-tunnel"
        mode: '0755'
      when: ansible_system == 'Darwin'

    - name: Configure development sync
      when: inventory_hostname == 'localhost'
      block:
        - name: Include dev-sync role
          ansible.builtin.include_role:
            name: dev-sync
          when: lookup('env', 'DEV_MODE') | bool
