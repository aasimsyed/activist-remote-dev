---
- name: Deploy Activist Application
  hosts: all
  vars:
    project_dir: "/root/activist"
    frontend_dir: "{{ project_dir }}/frontend"
  become: true

  handlers:
    - name: Debug Docker installation output
      ansible.builtin.debug:
        var: docker_install
    - name: Debug Yarn migration status
      ansible.builtin.debug:
        var: yarn_migration
      when: false

  tasks:
    - name: Wait for APT locks to be released
      ansible.builtin.shell: |
        while lsof /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || lsof /var/lib/apt/lists/lock >/dev/null 2>&1 || lsof /var/lib/dpkg/lock >/dev/null 2>&1; do
          sleep 5
        done
      changed_when: false

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      register: apt_update
      retries: 5
      delay: 30
      until: apt_update is success

    - name: Install required packages
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - git
          - python3-venv
        state: present
        update_cache: true
      register: apt_result
      retries: 5
      delay: 30
      until: apt_result is success

    - name: Add Docker GPG key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu noble stable"
        state: present
        update_cache: true

    - name: Wait for APT locks before Docker install
      ansible.builtin.shell: |
        while lsof /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || lsof /var/lib/apt/lists/lock >/dev/null 2>&1 || lsof /var/lib/dpkg/lock >/dev/null 2>&1; do
          sleep 5
        done
      changed_when: false

    - name: Install Docker packages
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: true
      register: docker_install
      retries: 5
      delay: 30
      until: docker_install is success

    - name: Wait for Docker to be installed
      ansible.builtin.wait_for:
        path: /usr/bin/docker
        timeout: 60

    - name: Enable and start Docker service
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: true
        daemon_reload: true
      register: docker_service
      retries: 3
      delay: 10
      until: docker_service is success

    - name: Clone application repository
      ansible.builtin.git:
        repo: "https://github.com/aasimsyed/activist.git"
        dest: "{{ project_dir }}"
        version: main
        force: true

    - name: Setup Node.js repository
      ansible.builtin.uri:
        url: https://deb.nodesource.com/setup_20.x
        return_content: true
      register: node_setup

    - name: Execute Node.js setup script
      ansible.builtin.shell: "{{ node_setup.content }}"
      args:
        executable: /bin/bash
      changed_when: false

    - name: Install Node.js
      ansible.builtin.apt:
        name: nodejs
        state: present
        update_cache: true
      environment:
        DEBIAN_FRONTEND: "noninteractive"
      register: nodejs_install
      retries: 3
      delay: 10
      until: nodejs_install is success

    - name: Update npm to latest version
      ansible.builtin.shell: |
        npm install -g npm@latest
      changed_when: false

    - name: Clean up existing Yarn installations
      become: true
      ansible.builtin.shell: |
        # Remove system Yarn
        npm uninstall -g yarn || true
        rm -f /usr/bin/yarn /usr/local/bin/yarn

        # Install Corepack directly
        npm install -g corepack

        # Enable Corepack
        corepack enable

        # Prepare specific Yarn version
        corepack prepare yarn@4.6.0 --activate
      args:
        executable: /bin/bash
      environment:
        PATH: "/usr/local/bin:/usr/bin:/bin:{{ ansible_env.PATH }}"
      register: corepack_setup
      changed_when: "'already enabled' not in corepack_setup.stdout"
      async: 300
      poll: 5

    - name: Set project Yarn version
      ansible.builtin.shell: |
        yarn set version berry 2>&1
      args:
        chdir: "{{ frontend_dir }}"
        executable: /bin/bash
      environment:
        PATH: "/usr/local/bin:/usr/bin:/bin:{{ ansible_env.PATH }}"
      changed_when: false

    - name: Pre-cache Yarn dependencies
      ansible.builtin.shell: |
        yarn config set enableInlineBuilds true
        yarn config set enableTelemetry false
        yarn config set httpTimeout 300000
      args:
        chdir: "{{ frontend_dir }}"
        executable: /bin/bash
      environment:
        PATH: "{{ ansible_env.HOME }}/.yarn/bin:/usr/local/bin:/usr/bin:/bin:{{ ansible_env.PATH }}"
      changed_when: false

    - name: Configure Yarn for non-interactive install
      ansible.builtin.shell: |
        yarn config set enableInteractive 0
        yarn config set enableProgressBars 0
        yarn config set enableTelemetry 0
      args:
        chdir: "{{ frontend_dir }}"
        executable: /bin/bash
      environment:
        PATH: "{{ ansible_env.HOME }}/.yarn/bin:/usr/local/bin:/usr/bin:/bin:{{ ansible_env.PATH }}"
      changed_when: false

    - name: Install dependencies with enforced timeout
      ansible.builtin.shell: |
        set -eo pipefail
        cd {{ frontend_dir }}
        timeout 1800 yarn install --immutable --immutable-cache --mode=skip-build
      args:
        executable: /bin/bash
      environment:
        PATH: "{{ ansible_env.HOME }}/.yarn/bin:/usr/local/bin:/usr/bin:/bin:{{ ansible_env.PATH }}"
        YARN_ENABLE_INLINE_BUILDS: "1"
        YARN_HTTP_TIMEOUT: "600000"  # 10 minutes
      async: 2000  # 33 minutes
      poll: 0
      register: yarn_install
      retries: 3
      delay: 300
      until: yarn_install is success
      changed_when: false

    - name: Migrate to Yarn Berry and install
      ansible.builtin.shell: |
        yarn set version berry
        yarn install
      args:
        chdir: "{{ frontend_dir }}"
        executable: /bin/bash
      environment:
        PATH: "{{ ansible_env.HOME }}/.yarn/bin:/usr/local/bin:/usr/bin:/bin:{{ ansible_env.PATH }}"
      async: 900  # 15 minutes
      poll: 0  # Full async mode
      register: yarn_migration
      retries: 2
      until: yarn_migration is success
      changed_when: false

    - name: Verify async job completion
      ansible.builtin.async_status:
        jid: "{{ yarn_migration.ansible_job_id }}"
      register: yarn_job_result
      until: yarn_job_result.finished
      retries: 30
      delay: 30
      ignore_errors: true  # Continue even if job disappeared

    - name: Validate async job ID
      ansible.builtin.debug:
        msg: "Yarn job ID: {{ yarn_migration.ansible_job_id }}"
      when: yarn_migration is defined

    - name: Check async status
      ansible.builtin.debug:
        var: yarn_job_result
      when: yarn_job_result is defined

    - name: Flush handlers
      ansible.builtin.meta: flush_handlers

    - name: Create Python virtual environment
      ansible.builtin.command:
        cmd: python3 -m venv venv
        chdir: "{{ project_dir }}"
        creates: "{{ project_dir }}/venv/bin/activate"

    - name: Install Python dependencies
      ansible.builtin.pip:
        requirements: "{{ project_dir }}/backend/requirements-dev.txt"
        virtualenv: "{{ project_dir }}/venv"
        state: present

    - name: Configure backend port binding
      ansible.builtin.lineinfile:
        path: "{{ project_dir }}/docker-compose.yml"
        regexp: '("${BACKEND_PORT}:${BACKEND_PORT}")'
        line: '"0.0.0.0:\1"'
        backrefs: true

    - name: Configure frontend port binding
      ansible.builtin.lineinfile:
        path: "{{ project_dir }}/docker-compose.yml"
        regexp: '("${FRONTEND_PORT}:${FRONTEND_PORT}")'
        line: '"0.0.0.0:\1"'
        backrefs: true

    - name: Deploy backend and database first
      community.docker.docker_compose_v2:
        project_src: "{{ project_dir }}"
        env_files:
          - .env.dev
        services:
          - backend
          - db
        build: always
        state: present

    - name: Deploy full application stack
      community.docker.docker_compose_v2:
        project_src: "{{ project_dir }}"
        env_files:
          - .env.dev
        files:
          - docker-compose.yml
        state: present
        pull: "always"
        remove_orphans: true
        build: "always"
      register: compose_result
      until: compose_result is success
      retries: 3
      delay: 10
