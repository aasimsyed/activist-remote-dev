---
- name: Deploy Activist Application
  hosts: all
  vars:
    project_dir: /root/activist
    frontend_dir: "{{ project_dir }}/frontend"
  become: true

  handlers:
    - name: Debug Docker installation output
      ansible.builtin.debug:
        var: docker_install

  tasks:
    - name: Wait for APT locks to be released
      ansible.builtin.shell: |
        while lsof /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || lsof /var/lib/apt/lists/lock >/dev/null 2>&1 || lsof /var/lib/dpkg/lock >/dev/null 2>&1; do
          sleep 5
        done
      changed_when: false

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      register: apt_update
      retries: 5
      delay: 30
      until: apt_update is success

    - name: Install required packages
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - git
        state: present
        update_cache: true
      register: apt_result
      retries: 5
      delay: 30
      until: apt_result is success

    - name: Add Docker GPG key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu noble stable"
        state: present
        update_cache: true

    - name: Wait for APT locks before Docker install
      ansible.builtin.shell: |
        while lsof /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || lsof /var/lib/apt/lists/lock >/dev/null 2>&1 || lsof /var/lib/dpkg/lock >/dev/null 2>&1; do
          sleep 5
        done
      changed_when: false

    - name: Install Docker packages
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: true
      register: docker_install
      retries: 5
      delay: 30
      until: docker_install is success

    - name: Wait for Docker to be installed
      ansible.builtin.wait_for:
        path: /usr/bin/docker
        timeout: 60

    - name: Enable and start Docker service
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: true
        daemon_reload: true
      register: docker_service
      retries: 3
      delay: 10
      until: docker_service is success

    - name: Clone application repository
      ansible.builtin.git:
        repo: "https://github.com/aasimsyed/activist.git"
        dest: "{{ project_dir }}"
        version: main
        force: true

    - name: Setup Node.js repository
      ansible.builtin.shell: |
        set -o pipefail
        curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
      args:
        warn: false
        executable: /bin/bash
      changed_when: false

    - name: Install Node.js
      ansible.builtin.apt:
        name: nodejs
        state: present
        update_cache: true
      environment:
        DEBIAN_FRONTEND: "noninteractive"
      register: nodejs_install
      retries: 3
      delay: 10
      until: nodejs_install is success

    - name: Install npm
      ansible.builtin.apt:
        name: npm
        state: present
      register: npm_install
      retries: 3
      delay: 10
      until: npm_install is success

    - name: Install corepack globally
      ansible.builtin.shell: |
        npm install -g corepack
      register: corepack_install
      retries: 3
      delay: 10
      until: corepack_install is success
      changed_when: false

    - name: Enable corepack
      ansible.builtin.shell: |
        /usr/local/bin/corepack enable
      changed_when: false

    - name: Update apt and install Yarn
      ansible.builtin.apt:
        name: yarn
        state: present
        update_cache: true
      environment:
        DEBIAN_FRONTEND: "noninteractive"

    - name: Configure and verify Yarn
      ansible.builtin.shell: |
        cd {{ frontend_dir }} && yarn set version berry 2>&1
        cd {{ frontend_dir }} && yarn install 2>&1
        YARN_VERSION=$(yarn --version 2>&1)
        echo "Installed Yarn version: $YARN_VERSION"
        if [ "$YARN_VERSION" != "4.6.0" ]; then
          echo "Error: Expected Yarn 4.6.0 but got $YARN_VERSION" >&2
          exit 1
        fi
      args:
        executable: /bin/bash
      environment:
        PATH: "/usr/local/bin:/usr/bin:/bin:{{ ansible_env.PATH }}"
      register: yarn_setup
      changed_when: false

    - name: Install pip3
      ansible.builtin.apt:
        name: python3-pip
        state: present
        update_cache: true
    - name: Install Python dependencies
      ansible.builtin.apt:
        name:
          - python3-venv
          - python3-pip
          - python3-full
        state: present
        update_cache: true
    - name: Create Python virtual environment
      ansible.builtin.command:
        cmd: python3 -m venv venv
        chdir: "{{ project_dir }}"
        creates: "{{ project_dir }}/venv/bin/activate"
    - name: Install Python dependencies
      ansible.builtin.pip:
        requirements: "{{ project_dir }}/backend/requirements-dev.txt"
        virtualenv: "{{ project_dir }}/venv"
        state: present
    - name: Configure Yarn dependencies
      ansible.builtin.command:
        cmd: yarn install --immutable
        chdir: "{{ frontend_dir }}"
      environment:
        YARN_ENABLE_INLINE_BUILDS: "1"
        NODE_ENV: production
      changed_when: false

    - name: Configure backend port binding
      ansible.builtin.lineinfile:
        path: "{{ project_dir }}/docker-compose.yml"
        regexp: '("${BACKEND_PORT}:${BACKEND_PORT}")'
        line: '"0.0.0.0:\1"'
        backrefs: true
    - name: Configure frontend port binding
      ansible.builtin.lineinfile:
        path: "{{ project_dir }}/docker-compose.yml"
        regexp: '("${FRONTEND_PORT}:${FRONTEND_PORT}")'
        line: '"0.0.0.0:\1"'
        backrefs: true
    - name: Create .env file
      ansible.builtin.copy:
        dest: "{{ project_dir }}/.env"
        mode: '0644'
        content: |
          BACKEND_PORT=8000
          FRONTEND_PORT=3000
          DATABASE_NAME=activist
          DATABASE_USER=postgres
          DATABASE_PASSWORD=postgres
          DATABASE_HOST=db
          DATABASE_PORT=5432
          DJANGO_ALLOWED_HOSTS=*
          DEBUG=True
          SECRET_KEY=your-secret-key-here
          VITE_FRONTEND_URL=http://localhost:3000
    - name: Deploy backend and database first
      community.docker.docker_compose_v2:
        project_src: "{{ project_dir }}"
        env_files:
          - .env.dev
        services:
          - backend
          - db
        build: always
        state: present
    - name: Install frontend dependencies
      community.docker.docker_container:
        name: frontend-deps
        image: node:20
        command: bash -c "cd /app && yarn install"
        volumes:
          - "{{ frontend_dir }}:/app"
        cleanup: true
        detach: false

    - name: Build frontend
      community.docker.docker_container:
        name: frontend-build
        image: node:20
        command: bash -c "cd /app && yarn build"
        volumes:
          - "{{ frontend_dir }}:/app"
        cleanup: true
        detach: false

    - name: Deploy full application stack
      community.docker.docker_compose_v2:
        project_src: "{{ project_dir }}"
        files:
          - docker-compose.yml
        state: present
        pull: "always"
        remove_orphans: true
        build: "always"
      register: compose_result
      until: compose_result is success
      retries: 3
      delay: 10

    - name: Install system packages
      ansible.builtin.apt:
        name:
          - python3-venv
          - python3-pip
          - python3-full
          - nodejs
          - make
          - build-essential
          - libssl-dev
          - zlib1g-dev
          - libbz2-dev
          - libreadline-dev
          - libsqlite3-dev
          - wget
          - curl
          - llvm
          - libncursesw5-dev
          - xz-utils
          - tk-dev
          - libxml2-dev
          - libxmlsec1-dev
          - libffi-dev
          - liblzma-dev
        state: present
        update_cache: true
    - name: Build Docker images
      community.docker.docker_compose_v2:
        project_src: "{{ project_dir }}"
        build: "always"
      async: 600
      poll: 5
